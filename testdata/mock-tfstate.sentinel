import "strings"
import "types"

outputs = {}

_modules = {
	"root": {
		"data":      {},
		"path":      [],
		"resources": {},
	},

	"module.apache-Guy": {
		"data": {
			"aws_vpc": {
				"pkVpc": {
					0: {
						"attr": {
							"arn":        "arn:aws:ec2:us-east-1:035945648876:vpc/vpc-01a34b0fe9f1e44ec",
							"cidr_block": "172.31.0.0/16",
							"cidr_block_associations": [
								{
									"association_id": "vpc-cidr-assoc-0310dded97924846e",
									"cidr_block":     "172.31.0.0/16",
									"state":          "associated",
								},
							],
							"default":                              true,
							"dhcp_options_id":                      "dopt-0b979ab548e23eec5",
							"enable_dns_hostnames":                 true,
							"enable_dns_support":                   true,
							"enable_network_address_usage_metrics": false,
							"filter":              null,
							"id":                  "vpc-01a34b0fe9f1e44ec",
							"instance_tenancy":    "default",
							"ipv6_association_id": "",
							"ipv6_cidr_block":     "",
							"main_route_table_id": "rtb-0df4c1c28a888888e",
							"owner_id":            "035945648876",
							"state":               null,
							"tags":                {},
							"timeouts":            null,
						},
						"depends_on": [],
						"id":         "vpc-01a34b0fe9f1e44ec",
						"tainted":    false,
					},
				},
			},
			"template_file": {
				"user_data": {
					0: {
						"attr": {
							"filename": null,
							"id":       "708ff514b0fc9e595f76c1f18d5e76cee411a80b4f6b9b7f648971c142dd0b89",
							"rendered": "#cloud-config\npackages:\n  - httpd\nruncmd:\n  - systemctl start httpd\n  - sudo systemctl enable httpd",
							"template": "#cloud-config\npackages:\n  - httpd\nruncmd:\n  - systemctl start httpd\n  - sudo systemctl enable httpd",
							"vars":     null,
						},
						"depends_on": [],
						"id":         "708ff514b0fc9e595f76c1f18d5e76cee411a80b4f6b9b7f648971c142dd0b89",
						"tainted":    false,
					},
				},
			},
		},
		"path": [
			"apache-Guy",
		],
		"resources": {},
	},
}

module_paths = [
	[],
	[
		"apache-Guy",
	],
]

terraform_version = "1.4.6"

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
